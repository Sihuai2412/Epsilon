namespace epsilon.CodeAnalysis.Syntax;

public enum SyntaxKind {
    BadToken,

    // Trivia
    SkippedTextTrivia,
    WhitespaceTrivia,
    LineBreakTrivia,
    SingleLineCommentTrivia,
    MultiLineCommentTrivia,

    // Tokens
    StringToken,
    NumberToken,
    PlusToken,
    PlusEqualsToken,
    MinusToken,
    MinusEqualsToken,
    StarToken,
    StarEqualsToken,
    SlashToken,
    SlashEqualsToken,
    BangToken,
    EqualsToken,
    AmpersandToken,
    AmpersandEqualsToken,
    AmpersandAmpersandToken,
    PipeToken,
    PipeEqualsToken,
    PipePipeToken,
    EqualsEqualsToken,
    BangEqualsToken,
    LessToken,
    LessOrEqualsToken,
    GreaterToken,
    GreaterOrEqualsToken,
    OpenParenthesisToken,
    CloseParenthesisToken,
    OpenBraceToken,
    CloseBraceToken,
    ColonToken,
    SemicolonToken,
    CommaToken,
    TildeToken,
    HatToken,
    HatEqualsToken,
    EndOfFileToken,
    IdentifierToken,

    // Keywords
    ContinueKeyword,
    BreakKeyword,
    ElseKeyword,
    FalseKeyword,
    ForKeyword,
    FunctionKeyword,
    IfKeyword,
    LetKeyword,
    ReturnKeyword,
    ToKeyword,
    TrueKeyword,
    VarKeyword,
    WhileKeyword,
    DoKeyword,

    // Nodes
    CompilationUnit,
    FunctionDeclaration,
    GlobalStatement,
    Parameter,
    TypeClause,
    ElseClause,

    // Statements
    BlockStatement,
    VariableDeclaration,
    IfStatement,
    WhileStatement,
    DoWhileStatement,
    ForStatement,
    BreakStatement,
    ContinueStatement,
    ReturnStatement,
    ExpressionStatement,

    // Expressions
    LiteralExpression,
    NameExpression,
    UnaryExpression,
    BinaryExpression,
    CompoundAssignmentExpression,
    ParenthesizedExpression,
    AssignmentExpression,
    CallExpression,
    TokenExpression,
}
